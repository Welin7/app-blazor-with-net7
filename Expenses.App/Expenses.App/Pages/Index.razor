@page "/"
@using Expenses.App.Models;
@using Expenses.App.Services;

@inject IJSRuntime JsRuntime
@inject IExpensesService ExpensesService

<PageTitle>Index</PageTitle>

<h1>Expense Record</h1>

<button class="btn btn-primary" @onclick="() => OpenModal()">New Expense</button>

@if(TotalOfExpenses > 0)
{
    <div class="alert alert-secondary" style="margin-top: 12px;" role="alert">
        Total of Expenses: @TotalOfExpenses
    </div>
}

@if(Expense == null)
{
    <p><em>Loadgin...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Description</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var expense in Expenses)
            {
                <tr>
                    <td>@expense.Id</td>
                    <td>@expense.Description</td>
                    <td>@expense.Value</td>
                    <td>
                        <a href='#' @onclick="async () => await Delete(Expense.Id)">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}



<ModalDialog @ref="@ModalDialog" Title="Create Expense">
    <div class="row">
        <div class="form-group">
            <label for="expenseDescription" class="col-form-label">Description:</label>
            <input @bind-value="Expense.Description" type="text" class="form-control" id="expenseDescription"/>
        </div>
        <div class="form-group">
            <label for="expenseValue" class="col-form-label">Value:</label>
            <input @bind-value="Expense.Value" id="expenseValue" class="form-control"/>
        </div>
        
        <div class="modal-footer">
            <button class="btn btn-secondary" @onclick="() => ModalDialog.Close()">Cancel</button>
            <button type="button" class="btn btn-primary" @onclick="async () => await SaveExpense()">Save</button>
        </div>
    </div>
</ModalDialog>


@code{

    private ModalDialog ModalDialog { get; set; }

    private Expense Expense { get; set; }

    private List<Expense> Expenses = new();

    private double TotalOfExpenses => Expenses.Sum(s => s.Value);

    protected override async Task OnInitializedAsync()
    {
        Expense = new();

        Expenses = await ExpensesService.GetExpenses();
    }

    async Task Delete(Guid id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this record?");

        if (confirmed is false)
            return;

        var expenseToRemove = Expenses.FirstOrDefault(e => e.Id == id);
        Expenses.Remove(expenseToRemove);
        await ExpensesService.AddExpenses(Expenses);
    }

    async Task SaveExpense()
    {
        if(string.IsNullOrWhiteSpace(Expense.Description))
        {
            await JsRuntime.InvokeAsync<bool>("Alert", "Description needs to be filled.");
            return;
        }

        if (Expense.Value <= 0)
        {
            await JsRuntime.InvokeAsync<bool>("Alert", "Value must be greater than zero.");
            return;
        }

        Expenses.Add(new Expense()
        {
                Id = Guid.NewGuid(),
                Description = Expense.Description,
                Value = Expense.Value
        });

        await ExpensesService.AddExpenses(Expenses);

        ModalDialog.Close();
    }

    void OpenModal()
    {
        Expense = new();
        ModalDialog.Open();
    }
}